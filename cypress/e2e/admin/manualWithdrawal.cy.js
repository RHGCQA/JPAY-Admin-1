import LoginTest from "../pages/loginPages"
import exchangeRateTest from "../pages/exchangeRate"
import { validloginCredentials } from "../stringHolders/loginCredentials"
import manualWithdrawalTest from "../pages/manualWithdrawal"
import { manualWithdrawalValidCredentials, manualWithdrawalInvalidCredentials } from "../stringHolders/manualWithdrawalCredentials"
import { ManualDepositSuccessMessage, ManualWithdrawalSuccessMessage } from "../stringHolders/successMessage"

const login = new LoginTest()
const withdrawal = new manualWithdrawalTest()
const exchangeRate = new exchangeRateTest()

let emailAddress = validloginCredentials.stageEmailAddress
let password = validloginCredentials.stagePassword
let accountNumber = manualWithdrawalValidCredentials.stageValidAccountNumber
let merchantName = manualWithdrawalValidCredentials.stageValidMerchantName
let amount = manualWithdrawalValidCredentials.stageValidAmount
let message = manualWithdrawalValidCredentials.stageMessage
let adminNotes = manualWithdrawalValidCredentials.stageAdminNotes
let jpyDebit = manualWithdrawalValidCredentials.stageJPYDebitCurrency
let eurDebit = manualWithdrawalValidCredentials.stageEURDebitCurrency
let usdDebit = manualWithdrawalValidCredentials.stageUSDDebitCurrency
let gbpDebit = manualWithdrawalValidCredentials.stageGBPDebitCurrency
let phpDebit = manualWithdrawalValidCredentials.stagePHPDebitCurrency
let jpy = manualWithdrawalValidCredentials.stageJPYCurrency
let eur = manualWithdrawalValidCredentials.stageEURCurrency
let usd = manualWithdrawalValidCredentials.stageUSDCurrency
let gbp = manualWithdrawalValidCredentials.stageGBPCurrency
let php = manualWithdrawalValidCredentials.stagePHPCurrency
let successWithdrawalMessage = ManualWithdrawalSuccessMessage.successManualWithdrawal

describe("Go to Site", () => {
    beforeEach(() => {
      login.visit()
 
     })
      
    it.only("should create Manual Withdrawal All JPY Currency", () => {
       login.getEmailAddressField().type(emailAddress)
       login.getPasswordField().type(password)
       login.getloginButton().click()
       withdrawal.getManualWithdrawalFiat().click()
       withdrawal.getManualWithdrawalPage().click()
       withdrawal.getManualWithdrawalAddNewButton().click()
       withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
       withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(jpyDebit).contains(jpy)
       withdrawal.getManualWithdrawalCurrencyDropdown().select(jpy).should('have.value', jpy)
       withdrawal.getManualWithdrawalAmountField().type(amount)
       withdrawal.getManualWithdrawalMessageField().type(message)
       withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
       withdrawal.getManualWithdrawalAddNewSaveButton().click()
       withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
       withdrawal.getWithdrawalConfirmationName().contains(merchantName)
       withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
       withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(amount.toLocaleString())
       withdrawal.getWithdrawalConfirmationMessage().contains(message)
       withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
       withdrawal.getWithdrawalConfirmationSaveButton().click()
       withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
   })

    it("should create Manual Withdrawal All USD Currency", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber).click()
        cy.wait(3000)
        withdrawal.getManualWithdrawalAddNewCard().click()
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(usdDebit).contains(usd)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(usd).should('have.value', usd)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
    })

    it("should create Manual Withdrawal All  EUR Currency", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(eurDebit).contains(eur)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(eur).should('have.value', eur)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
    })

    it("should create Manual Withdrawal All  GBP Currency", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(gbpDebit).contains(gbp)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(gbp).should('have.value', gbp)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
    })

    it("should create Manual Withdrawal All PHP Currency", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(phpDebit).contains(php)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(php).should('have.value', php)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
    })

    it("should create Manual Withdrawal From USD to JPY", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(usdDebit).contains(usd)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(jpy).should('have.value', jpy)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From USD to EUR", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(usdDebit).contains(usd)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(eur).should('have.value', eur)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From USD to GBP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(usdDebit).contains(usd)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(gbp).should('have.value', gbp)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From USD to PHP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(php).should('have.value', php)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(usdDebit).contains(usd)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(php).should('have.value', php)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From EUR to USD", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(eurDebit).contains(eur)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(usd).should('have.value', usd)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From EUR to JPY", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(eurDebit).contains(eur)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(jpy).should('have.value', jpy)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From EUR to GBP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(eurDebit).contains(eur)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(gbp).should('have.value', gbp)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From EUR to PHP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(php).should('have.value', php)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(eurDebit).contains(eur)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(php).should('have.value', php)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From JPY to USD", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(jpyDebit).contains(jpy)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(usd).should('have.value', usd)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = Math.ceil(equivalent)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        cy.log(equivalent)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From JPY to EUR", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(jpyDebit).contains(jpy)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(eur).should('have.value', eur)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = Math.ceil(equivalent)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        cy.log(equivalent)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From JPY to PHP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(php).should('have.value', php)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(jpyDebit).contains(jpy)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(php).should('have.value', php)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = Math.ceil(equivalent)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        cy.log(equivalent)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From JPY to GBP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(jpyDebit).contains(jpy)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(gbp).should('have.value', gbp)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = Math.ceil(equivalent)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        cy.log(equivalent)
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From GBP to USD", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(usd).should('have.value', usd)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(gbpDebit).contains(gbp)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(usd).should('have.value', usd)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From GBP to EUR", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(eur).should('have.value', eur)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(gbpDebit).contains(gbp)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(eur).should('have.value', eur)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From GBP to JPY", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(jpy).should('have.value', jpy)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(gbpDebit).contains(gbp)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(jpy).should('have.value', jpy)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

    it("should create Manual Withdrawal From GBP to PHP", () => {
        login.getEmailAddressField().type(emailAddress)
        login.getPasswordField().type(password)
        login.getloginButton().click()
        exchangeRate.getAdminSettingsDropdown().click()
        exchangeRate.getExchangRatesPage().click()
        exchangeRate.getExchangeRateCurrencyFromDropdown().select(gbp).should('have.value', gbp)
        exchangeRate.getExchangeRateCurrencyToDropdown().select(php).should('have.value', php)
        exchangeRate.getExchangeRateFilterButton().click()
        cy.wait(5000)
        exchangeRate.getExchangeRateMarkedUpRate().then($mrkdUpRate => {
            let markedUpRate = $mrkdUpRate.text()
            cy.log(markedUpRate)
            cy.wrap(markedUpRate).as('markedUpRate')
        })
        cy.get('@markedUpRate').then(markedUpRate => { cy.log(markedUpRate)
        exchangeRate.getAdminSettingsDropdown().click()
        withdrawal.getManualWithdrawalFiat().click()
        withdrawal.getManualWithdrawalPage().click()
        withdrawal.getManualWithdrawalAddNewButton().click()
        withdrawal.getManualWithdrawalAccountNumberField().type(accountNumber)
        withdrawal.getManualWithdrawalAddNewCard().click()
        cy.wait(2000)
        withdrawal.getManualWithdarawalDebitCurrencyDropdown().select(gbpDebit).contains(gbp)
        withdrawal.getManualWithdrawalCurrencyDropdown().select(php).should('have.value', php)
        withdrawal.getManualWithdrawalAmountField().type(amount)
        withdrawal.getManualWithdrawalMessageField().type(message)
        withdrawal.getManualWithdrawalAdminNotesField().type(adminNotes)
        withdrawal.getManualWithdrawalAddNewSaveButton().click()
        withdrawal.getWithdrawalConfirmationAccountNumber().contains(accountNumber)
        withdrawal.getWithdrawalConfirmationName().contains(merchantName)
        let  equivalent = amount / markedUpRate
        equivalent = equivalent.toFixed(2)
        equivalent = equivalent.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        withdrawal.getWithdrawalConfirmationAmount().contains(amount.toLocaleString())
        withdrawal.getWithdrawalConfirmationEquivalentAmount().contains(equivalent)
        withdrawal.getWithdrawalConfirmationMessage().contains(message)
        withdrawal.getWithdrawalConfirmationAdminNotes().contains(adminNotes)
        withdrawal.getWithdrawalConfirmationSaveButton().click()
        withdrawal.getManualWithdrawalSuccessMessage().contains(successWithdrawalMessage)
        withdrawal.getManualWithdrawalCompletedAmount(amount.toLocaleString())
    })
    })

})